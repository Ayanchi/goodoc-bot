from datetime import date, timedelta, datetime

import telebot
import sqlite3

from openai import OpenAI
from telebot import types
from telebot.types import Message, CallbackQuery

from utilities import add_user_to_table, add_pill_to_table


client = OpenAI(
    api_key="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",
)

bot_client = telebot.TeleBot(token='6895428130:AAG4i9ZgakJzn048GOYFKNjwVUYjg9f2n_c')

pillName = ''
duration = 0
interval = 0
countOfDay = []
user_id = 0


@bot_client.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª —Ç–∞–±–ª–µ—Ç–æ–∫ üîóüíä")
def goToPills(message: Message):
    bot_client.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ –∏–ª–∏ —Ç–∞–±–ª–µ—Ç–æ–∫ –Ω–∏–∂–µ üëá'
                                 '(–µ—Å–ª–∏ —É –Ω–∏—Ö –æ–¥–∏–Ω —Ü–∏–∫–ª, –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞)')
    bot_client.register_next_step_handler(message, duration_pills)


def duration_pills(message: Message):
    global pillName
    pillName = message.text
    markup = types.InlineKeyboardMarkup()

    btnWeek = types.InlineKeyboardButton('1 –ù–µ–¥–µ–ª—é', callback_data='1week')
    btnDay = types.InlineKeyboardButton('1 –î–µ–Ω—å', callback_data='1day')
    btn1Month = types.InlineKeyboardButton('1 –ú–µ—Å—è—Ü', callback_data='1month')
    btn2Month = types.InlineKeyboardButton('2 –ú–µ—Å—è—Ü–∞', callback_data='2month')
    btnYear = types.InlineKeyboardButton('1 –ì–æ–¥', callback_data='1year')

    markup.add(btnWeek, btn1Month, btn2Month, btnYear, btnDay)

    bot_client.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏", reply_markup=markup)


@bot_client.callback_query_handler(func=lambda call: call.data in ['1week', '1month', '2month', '1year', '1day'])
def handle_callback_query(call: CallbackQuery):
    global duration
    if call.data == '1week':
        duration = 7
    elif call.data == '1month':
        duration = 30
    elif call.data == '2month':
        duration = 60
    elif call.data == '1year':
        duration = 365

    else:
        duration = 0

    countPillOfDay(call.message)


def countPillOfDay(message: Message):
    chat_id = message.chat.id
    bot_client.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–∞ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å ('
                                     '–ù–∞—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 11:22, 21:00;'
                                     '–µ—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: 13:00, 17:30, 18:45)')

    bot_client.register_next_step_handler(message, interval_pills)


def interval_pills(message: Message):
    global countOfDay
    countOfDay = message.text
    markup = types.InlineKeyboardMarkup()

    btnWeek = types.InlineKeyboardButton('–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data='everyday')
    btnDay = types.InlineKeyboardButton('–ß–µ—Ä–µ–∑ –¥–µ–Ω—å', callback_data='dayahead')
    btn1Month = types.InlineKeyboardButton('–ö–∞–∂–¥—ã–µ 2 –¥–Ω—è', callback_data='every2day')
    btn2Month = types.InlineKeyboardButton('–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è', callback_data='every3day')
    btnYear = types.InlineKeyboardButton('–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data='everyweek')

    markup.add(btnWeek, btn1Month, btn2Month, btnYear, btnDay)

    bot_client.send_message(message.chat.id, "–° –∫–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏", reply_markup=markup)


@bot_client.callback_query_handler(
    func=lambda call: call.data in ['everyday', 'dayahead', 'every2day', 'every3day', 'everyweek'])
def handle_callback_query(call: CallbackQuery):
    global interval
    if call.data == 'dayahead':
        interval = 1
    elif call.data == 'every2day':
        interval = 2
    elif call.data == 'every3day':
        interval = 3
    elif call.data == 'everyweek':
        interval = 7
    else:
        interval = 0

    final(call.message.chat.id)


def final(user_id_id):
    current_date = date.today()
    new_date_interval = current_date + timedelta(days=interval)
    new_date_duration = current_date + timedelta(days=duration)
    print("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:", new_date_interval)
    print(pillName, duration, countOfDay, interval, new_date_interval)
    add_pill_to_table(pillName, countOfDay, new_date_duration, user_id, interval, new_date_interval)

    bot_client.send_message(user_id_id, "–¶–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω üíñüòò")


@bot_client.message_handler(commands=['get_data'])
def get_data_section(message: Message):
    user_id_pills = message.from_user.id

    conn = sqlite3.connect('goodoc.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM pill WHERE userId = ?', (user_id_pills,))
    result = cursor.fetchall()
    print(result)

    if result:
        user_name = message.from_user.username if message.from_user.username else "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        response = f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n"

        for row in result:
            response += f"ID: {row[0]}\n" \
                        f"–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç: {row[1]}\n" \
                        f"–í—Ä–µ–º—è –≤—ã–ø–∏–≤–∞–Ω–∏—è: {row[2]}\n" \
                        f"–ö–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {row[3]}\n" \
                        f"ID: {row[4]}\n" \
                        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {row[5]}\n" \
                        f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏—ë–º–∞: {row[6]}\n" \
                        f"{'-' * 20}\n"

        bot_client.send_message(message.chat.id, response)
    else:
        bot_client.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@bot_client.message_handler(commands=['check_data'])
def renewal(message: Message):
    current_date = date.today()
    current_time = datetime.now().strftime('%H:%M')

    user_id_pills = message.from_user.id

    conn = sqlite3.connect('goodoc.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM pill WHERE userId = ?', (user_id_pills,))
    result = cursor.fetchall()
    print(result)

    if result:
        user_name = message.from_user.username if message.from_user.username else "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        response = f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n"

        for row in result:
            time_obj = datetime.strptime(row[2], '%H:%M').time()
            formatted_time = time_obj.strftime('%H:%M')

            interval_date_str = row[6]
            interval_date = datetime.strptime(interval_date_str, '%Y-%m-%d').date()

            duration_date_str = row[3]
            duration_date = datetime.strptime(duration_date_str, '%Y-%m-%d').date()

            if formatted_time == current_time and interval_date == current_date:
                print('true')
            if duration_date == current_date:
                cursor.execute('DELETE FROM pill WHERE userId = ?', (user_id_pills,))
                bot_client.send_message(message.chat.id, f"–î–∞–Ω–Ω–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ {row[1]}")
                print('true')

            if formatted_time == current_time and interval_date == current_date:
                interval_num_str = row[5]
                interval_num = int(interval_num_str)

                new_date_interval = interval_date + timedelta(days=interval_num)

                cursor.execute('''
                     UPDATE pill
                     SET intervalExDay=?
                     WHERE id=?
                 ''', (new_date_interval, row[0]))

                bot_client.send_message(chat_id=message.chat.id,
                                        text=f'–£–∂–µ {current_time} –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å {row[1]} üòäüíä,\n'
                                             f'C–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø—Ä–∏–Ω—è—Ç–∏—è ü§© {new_date_interval}')


@bot_client.message_handler(commands=['start'])
def start(message: Message):
    global user_id
    conn = sqlite3.connect('goodoc.db')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT,
                    first_name TEXT
                )''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS pill (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pill TEXT,
                    timeDate TEXT,
                    duration DATA,
                    userId INTEGER PRIMARY KEY,
                    intervalEx INTEGER,
                    intervalExDay DATA,
                    FOREIGN KEY (userId) REFERENCES users(id)
                )''')

    conn.commit()

    cursor.close()
    conn.close()

    # send user data into users Table
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    add_user_to_table(user_id, username, first_name)

    # create burger menu
    markup = types.ReplyKeyboardMarkup()
    item2 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª —Ç–∞–±–ª–µ—Ç–æ–∫ üîóüíä')

    markup.add(item2)

    bot_client.send_message(chat_id=message.chat.id,
                            text='–î–æ–±—Ä–æ üòò –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –±–æ—Ç —Å–ª—É–∂–∏—Ç –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ –ø—Ä–∏–µ–º—É –ª–µ–∫–∞—Ä—Å—Ç–≤ üíñü§†')
    bot_client.send_message(chat_id=message.chat.id,
                            text='–ù—É –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏—ë–º–æ–≤. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ üëá',
                            reply_markup=markup)
    print(user_id)


@bot_client.message_handler(commands=['gpt'])
def handle_start(message: Message):
    print('–ó–∞–ø—É—â–µ–Ω –±–æ—Ç')
    bot_client.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ChatGPT.")
    bot_client.register_next_step_handler(message, get_gpt_response)


def get_gpt_response(message: Message):
    bot_client.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ üôè‚ò∫Ô∏è')
    response = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": f"{message.text}. –°–æ—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–µ –±–æ–ª—å—à–µ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            }
        ],
        model="gpt-3.5-turbo",
    )

    bot_client.reply_to(message, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –≤–æ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç ü§ù\n' + response.choices[0].message.content)


bot_client.polling(none_stop=True)
